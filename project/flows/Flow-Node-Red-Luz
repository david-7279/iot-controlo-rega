[
    {
        "id": "4ead8d4e410d1ace",
        "type": "tab",
        "label": "Pratical Work",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6226d9c2277498ae",
        "type": "comment",
        "z": "4ead8d4e410d1ace",
        "name": "Subscrever ao Tópico da Temperatura",
        "info": "",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "dea2d15d22bc1ebb",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Temperatura",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "c632dd4bc9779bab",
                "e810ef8eaeafcca2"
            ]
        ]
    },
    {
        "id": "c632dd4bc9779bab",
        "type": "ui_gauge",
        "z": "4ead8d4e410d1ace",
        "name": "Temperatura (ºC)",
        "group": "grp1",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "Temperatura",
        "label": "ºC",
        "format": "{{value}}",
        "min": "-20",
        "max": 50,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 550,
        "y": 200,
        "wires": []
    },
    {
        "id": "aed7113e9a74b2ad",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Humidade Ar",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/HumidadeAr",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "a3fbfba9cc7cf84e",
                "1c76572c310dc339",
                "e810ef8eaeafcca2"
            ]
        ]
    },
    {
        "id": "a3fbfba9cc7cf84e",
        "type": "ui_gauge",
        "z": "4ead8d4e410d1ace",
        "name": "Humidade Ar (%)",
        "group": "grp1",
        "order": 2,
        "width": 6,
        "height": "4",
        "gtype": "gage",
        "title": "Humidade do Ar",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "5563af99c1f8856a",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Humidade Solo",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/HumidadeSolo",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 260,
        "y": 580,
        "wires": [
            [
                "9b1fe71d84e9091b",
                "6be96427209c5b32",
                "e810ef8eaeafcca2"
            ]
        ]
    },
    {
        "id": "9b1fe71d84e9091b",
        "type": "ui_gauge",
        "z": "4ead8d4e410d1ace",
        "name": "Humidade Solo (%)",
        "group": "grp1",
        "order": 3,
        "width": 6,
        "height": "4",
        "gtype": "gage",
        "title": "Humidade do Solo",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "761f8c9e6da0133c",
        "type": "comment",
        "z": "4ead8d4e410d1ace",
        "name": "Subscrever ao Tópico da Humidade",
        "info": "",
        "x": 320,
        "y": 420,
        "wires": []
    },
    {
        "id": "1884f011b2e29ca6",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Estado Bomba",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/EstadoRega",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 260,
        "y": 940,
        "wires": [
            [
                "275e350a58ab1f9b"
            ]
        ]
    },
    {
        "id": "089ed38a81d53184",
        "type": "comment",
        "z": "4ead8d4e410d1ace",
        "name": "Estado da Bomba",
        "info": "",
        "x": 270,
        "y": 880,
        "wires": []
    },
    {
        "id": "6be96427209c5b32",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Decisão Rega Automática",
        "func": "var solo = parseInt(msg.payload);\nif (solo < 30) {\n    msg.payload = \"REGAR\";\n} else {\n    msg.payload = \"NAO_REGAR\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 720,
        "wires": [
            [
                "0dff9e164650dc65"
            ]
        ]
    },
    {
        "id": "8ecd687e9944279c",
        "type": "ui_button",
        "z": "4ead8d4e410d1ace",
        "name": "Botão Manual",
        "group": "grp1",
        "order": 4,
        "width": 6,
        "height": 2,
        "passthru": false,
        "label": "REGAR MANUAL",
        "tooltip": "Força a rega manualmente",
        "color": "white",
        "bgcolor": "gray",
        "className": "",
        "icon": "",
        "payload": "REGAR",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 580,
        "y": 760,
        "wires": [
            [
                "0dff9e164650dc65"
            ]
        ]
    },
    {
        "id": "0dff9e164650dc65",
        "type": "mqtt out",
        "z": "4ead8d4e410d1ace",
        "name": "Comando Rega",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/ComandoRega",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "12da53346277876d",
        "x": 800,
        "y": 720,
        "wires": []
    },
    {
        "id": "275e350a58ab1f9b",
        "type": "ui_text",
        "z": "4ead8d4e410d1ace",
        "group": "grp1",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "Estado Atual",
        "label": "Estado da Bomba",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "Verdana,Verdana,Geneva,sans-serif",
        "fontSize": "14",
        "color": "#000000",
        "x": 510,
        "y": 940,
        "wires": []
    },
    {
        "id": "0b64995096bc7026",
        "type": "comment",
        "z": "4ead8d4e410d1ace",
        "name": "Funcionalidade da Bomba",
        "info": "",
        "x": 550,
        "y": 680,
        "wires": []
    },
    {
        "id": "8d65e784624cf848",
        "type": "comment",
        "z": "4ead8d4e410d1ace",
        "name": "Encriptação dos Dados",
        "info": "",
        "x": 1380,
        "y": 420,
        "wires": []
    },
    {
        "id": "ffcae20b948503e5",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Descriptografar Temperatura",
        "func": "const CryptoJS = require('crypto-js');\nconst key = CryptoJS.enc.Hex.parse('2b7e151628aed2a6abf7158809cf4f3c');\nconst iv = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nif (msg.topic === 'IPB/IoT/PW2/TurnoD/Group2/Temperatura') {\n    const bytes = CryptoJS.AES.decrypt({ ciphertext: CryptoJS.enc.Base64.parse(msg.payload) }, key, { iv: iv });\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    msg.payload = [{\n        measurement: 'Temperatura',\n        fields: {\n            temperature: parseFloat(decrypted)\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            }
        ],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "13bec9b25a428a47"
            ]
        ]
    },
    {
        "id": "f7bb95bd231ea04c",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Descriptografar Humidade Ar",
        "func": "const CryptoJS = require('node-red-contrib-crypto-js');\nconst key = CryptoJS.enc.Hex.parse('2b7e151628aed2a6abf7158809cf4f3c');\nconst iv = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nif (msg.topic === 'IPB/IoT/PW2/TurnoD/Group2/HumidadeAr') {\n    const bytes = CryptoJS.AES.decrypt({ ciphertext: CryptoJS.enc.Base64.parse(msg.payload) }, key, { iv: iv });\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    msg.payload = [{\n        measurement: 'HumidadeAr',\n        fields: {\n            humidity_air: parseFloat(decrypted)\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            }
        ],
        "x": 780,
        "y": 480,
        "wires": [
            [
                "38f3f2af7ef4828d"
            ]
        ]
    },
    {
        "id": "44a0b0b9952a8824",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Descriptografar Humidade Solo",
        "func": "const CryptoJS = require('crypto-js');\nconst key = CryptoJS.enc.Hex.parse('2b7e151628aed2a6abf7158809cf4f3c');\nconst iv = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nif (msg.topic === 'IPB/IoT/PW2/TurnoD/Group2/HumidadeSolo') {\n    const bytes = CryptoJS.AES.decrypt({ ciphertext: CryptoJS.enc.Base64.parse(msg.payload) }, key, { iv: iv });\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    msg.payload = [{\n        measurement: 'HumidadeSolo',\n        fields: {\n            soil_moisture: parseFloat(decrypted)\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            }
        ],
        "x": 770,
        "y": 580,
        "wires": [
            [
                "bcea3aaf6da6dc9d"
            ]
        ]
    },
    {
        "id": "13bec9b25a428a47",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 260,
        "wires": []
    },
    {
        "id": "1c76572c310dc339",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 520,
        "wires": []
    },
    {
        "id": "42be68faa24d1394",
        "type": "influxdb batch",
        "z": "4ead8d4e410d1ace",
        "influxdb": "1321e38534c72a5c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "rega",
        "x": 870,
        "y": 360,
        "wires": []
    },
    {
        "id": "bcea3aaf6da6dc9d",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 580,
        "wires": []
    },
    {
        "id": "38f3f2af7ef4828d",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 480,
        "wires": []
    },
    {
        "id": "e810ef8eaeafcca2",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Enviar Dados para o Influx",
        "func": "if (msg.topic === \"IPB/IoT/PW2/TurnoD/Group2/Temperatura\") {\n    msg.payload = [{\n        measurement: \"Temperatura\",\n        fields: {\n            temperature: msg.payload,\n        },\n        tags: {\n            sensorID: \"sensor_Internal\",\n            location: \"internal_area\"\n        }\n    }];\n} else if (msg.topic === \"IPB/IoT/PW2/TurnoD/Group2/HumidadeAr\") {\n    msg.payload = [{\n        measurement: \"Humidade do Ar\",\n        fields: {\n            humidadeAr: msg.payload,\n        },\n        tags: {\n            sensorID: \"sensor_External\",\n            location: \"external_area\"\n        }\n    }];\n} else if (msg.topic === \"IPB/IoT/PW2/TurnoD/Group2/HumidadeSolo\") {\n    msg.payload = [{\n        measurement: \"Humidade do Solo\",\n        fields: {\n            humidadeSolo: msg.payload\n        },\n        tags: {\n            sensorID: \"sensor_External\",\n            location: \"external_area\"\n        }\n    }];\n} \n    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 360,
        "wires": [
            [
                "42be68faa24d1394",
                "f36651b6493a3db1"
            ]
        ]
    },
    {
        "id": "f36651b6493a3db1",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 320,
        "wires": []
    },
    {
        "id": "9676cbb7a29a58f7",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Temperatura",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1350,
        "y": 500,
        "wires": [
            [
                "cefd385f8d49d927",
                "baa187f81bbf7f7d",
                "5de2da21b673321f"
            ]
        ]
    },
    {
        "id": "548c6a94e993e728",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Format Temperatura for InfluxDB",
        "func": "try {\n    const value = parseFloat(msg.payload);\n    if (isNaN(value)) {\n        node.error('Invalid decrypted temperature: ' + msg.payload);\n        return null;\n    }\n    msg.payload = [{\n        measurement: 'Temperatura',\n        fields: {\n            temperature: value\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n    return msg;\n} catch (e) {\n    node.error('Error formatting temperature: ' + e.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 500,
        "wires": [
            [
                "e6a7a01192b8691e",
                "4ed5df559aa3fc5b"
            ]
        ]
    },
    {
        "id": "71cc38b85690e931",
        "type": "ui_gauge",
        "z": "4ead8d4e410d1ace",
        "name": "Temperatura (ºC)",
        "group": "grp1",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "Temperatura",
        "label": "ºC",
        "format": "{{value}}",
        "min": "-20",
        "max": 50,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1810,
        "y": 540,
        "wires": []
    },
    {
        "id": "6bc7f198a1a96250",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "Debug Decrypted Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 580,
        "wires": []
    },
    {
        "id": "e6a7a01192b8691e",
        "type": "influxdb batch",
        "z": "4ead8d4e410d1ace",
        "influxdb": "a6e62f61afea6314",
        "name": "InfluxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "IoT",
        "x": 2120,
        "y": 500,
        "wires": []
    },
    {
        "id": "cefd385f8d49d927",
        "type": "decrypt",
        "z": "4ead8d4e410d1ace",
        "name": "",
        "algorithm": "AES",
        "key": "ReAu+O0WLfzsqkG/0JeQ3y/HfzKM42LFQKYc1PkScs4=",
        "x": 1560,
        "y": 500,
        "wires": [
            [
                "548c6a94e993e728",
                "71cc38b85690e931",
                "6bc7f198a1a96250"
            ]
        ]
    },
    {
        "id": "baa187f81bbf7f7d",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 560,
        "wires": []
    },
    {
        "id": "4ed5df559aa3fc5b",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 540,
        "wires": []
    },
    {
        "id": "e0d6216b9c5ed141",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 640,
        "wires": []
    },
    {
        "id": "47a9c1d924580074",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Secret Key",
        "topic": "Cripto/AES",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1340,
        "y": 640,
        "wires": [
            [
                "e0d6216b9c5ed141"
            ]
        ]
    },
    {
        "id": "5de2da21b673321f",
        "type": "decode",
        "z": "4ead8d4e410d1ace",
        "name": "",
        "encode": "Base64",
        "x": 1580,
        "y": 380,
        "wires": [
            [
                "cefd385f8d49d927",
                "73865a798041c1a6"
            ]
        ]
    },
    {
        "id": "73865a798041c1a6",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 380,
        "wires": []
    },
    {
        "id": "ecbdc44672f308dd",
        "type": "comment",
        "z": "4ead8d4e410d1ace",
        "name": "Subscrever ao Tópico da Temperatura",
        "info": "",
        "x": 1430,
        "y": 760,
        "wires": []
    },
    {
        "id": "7bc131d81190e1a2",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Temperatura",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1350,
        "y": 820,
        "wires": [
            [
                "a9e721d83d88feaa",
                "68a6f60044b48cb7",
                "93c69f2436934366"
            ]
        ]
    },
    {
        "id": "a9e721d83d88feaa",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "Debug Raw Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 940,
        "wires": []
    },
    {
        "id": "68a6f60044b48cb7",
        "type": "decode",
        "z": "4ead8d4e410d1ace",
        "name": "Decode Base64",
        "encode": "Base64",
        "x": 1560,
        "y": 880,
        "wires": [
            [
                "2ee0e2d851b21105"
            ]
        ]
    },
    {
        "id": "2ee0e2d851b21105",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "Debug Decoded Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 880,
        "wires": []
    },
    {
        "id": "93c69f2436934366",
        "type": "decrypt",
        "z": "4ead8d4e410d1ace",
        "name": "Decrypt Temperatura",
        "algorithm": "aes",
        "key": "45e02ef8ed0c5cfeacaa51bfd09790df",
        "x": 1580,
        "y": 820,
        "wires": [
            [
                "fcd9140ad00ef6eb",
                "9a9d930685539a7a"
            ]
        ]
    },
    {
        "id": "fcd9140ad00ef6eb",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Format Temperatura for InfluxDB",
        "func": "try {\n    const value = parseFloat(msg.payload);\n    if (isNaN(value)) {\n        node.error('Invalid decrypted temperature: ' + msg.payload);\n        return null;\n    }\n    msg.payload = [{\n        measurement: 'Temperatura',\n        fields: {\n            temperature: value\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n    return msg;\n} catch (e) {\n    node.error('Error formatting temperature: ' + e.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 820,
        "wires": [
            [
                "334d99dd5d8af09a"
            ]
        ]
    },
    {
        "id": "9a9d930685539a7a",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "Debug Decrypted Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 780,
        "wires": []
    },
    {
        "id": "334d99dd5d8af09a",
        "type": "influxdb batch",
        "z": "4ead8d4e410d1ace",
        "influxdb": "f5fc81e81c0f4619",
        "name": "InfluxDB Temperatura",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "IoT",
        "x": 2220,
        "y": 820,
        "wires": []
    },
    {
        "id": "612f2978efc82bd4",
        "type": "comment",
        "z": "4ead8d4e410d1ace",
        "name": "API IPMA",
        "info": "",
        "x": 260,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7185912fda458be0",
        "type": "inject",
        "z": "4ead8d4e410d1ace",
        "name": "Verificação todos os dias as 08:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 1180,
        "wires": [
            [
                "052b2a1ad72b4108"
            ]
        ]
    },
    {
        "id": "052b2a1ad72b4108",
        "type": "http request",
        "z": "4ead8d4e410d1ace",
        "name": "IPMA Previsão Bragança",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.ipma.pt/open-data/forecast/meteorology/cities/daily/1040200.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1180,
        "wires": [
            [
                "f19f49a350e17e46",
                "1ddd70e952dbba70"
            ]
        ]
    },
    {
        "id": "1ddd70e952dbba70",
        "type": "function",
        "z": "4ead8d4e410d1ace",
        "name": "Decisão de Rega baseado na API",
        "func": "try {\n    const today = new Date().toISOString().split('T')[0];\n\n    // Extrai os dados da API\n    const forecastData = msg.payload.data;\n    const todayForecast = forecastData.find(day => day.forecastDate === today);\n    const precipProbability = todayForecast ? parseFloat(todayForecast.precipitaProb) : 0;\n\n    // Logica da chuva\n    const precipThreshold = 30; // Limiar de probabilidade de precipitação (%)\n    const willRain = precipProbability >= precipThreshold; //  É provável que chova se a probabilidade for >= 30%\n\n    // Decisão da rega\n    if (willRain) {\n        msg.payload = 'NAO_REGAR';\n        node.warn(`Probabilidade de chuva: Probabilidade de precipitação=${precipProbability}%`);\n    } else {\n        msg.payload = 'REGAR';\n        node.warn(`Não se prevê chuva: Probabilidade de precipitação=${precipProbability}%`);\n    }\n\n    msg.topic = 'IPB/IoT/PW2/TurnoD/Group2/ComandoRega';\n    return msg;\n} catch (e) {\n    node.error('Error: ' + e.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1180,
        "wires": [
            [
                "100a2d3ecc85bc65",
                "abd42e84de24361e"
            ]
        ]
    },
    {
        "id": "100a2d3ecc85bc65",
        "type": "mqtt out",
        "z": "4ead8d4e410d1ace",
        "name": "Controlo da Rega",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/ComandoRega",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "12da53346277876d",
        "x": 1250,
        "y": 1180,
        "wires": []
    },
    {
        "id": "abd42e84de24361e",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "Decisão de Rega",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f19f49a350e17e46",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "Previsão",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c2d3641cf92d97d8",
        "type": "mqtt in",
        "z": "4ead8d4e410d1ace",
        "name": "Luz",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Luminosidade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 800,
        "wires": [
            [
                "9ac35a64d0828977",
                "5db814cb45a1e177"
            ]
        ]
    },
    {
        "id": "9ac35a64d0828977",
        "type": "ui_gauge",
        "z": "4ead8d4e410d1ace",
        "name": "Luz",
        "group": "grp1",
        "order": 3,
        "width": 6,
        "height": "4",
        "gtype": "wave",
        "title": "Luz",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 510,
        "y": 820,
        "wires": []
    },
    {
        "id": "5db814cb45a1e177",
        "type": "debug",
        "z": "4ead8d4e410d1ace",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 800,
        "wires": []
    },
    {
        "id": "12da53346277876d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "grp1",
        "type": "ui_group",
        "name": "Dashboard Rega",
        "tab": "tab1",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "1321e38534c72a5c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Version2",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "a6e62f61afea6314",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "f5fc81e81c0f4619",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": false
    },
    {
        "id": "tab1",
        "type": "ui_tab",
        "name": "Sistema de Rega",
        "icon": "dashboard",
        "order": 1
    }
]
