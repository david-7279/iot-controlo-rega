[
    {
        "id": "a4b69b0808ede90b",
        "type": "tab",
        "label": "Pratical Work",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "01f39cd775e9eddf",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "Subscrever ao Tópico da Temperatura",
        "info": "",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "026ff1664cf7ea05",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Temperatura",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "e3a06b222a8f9248",
                "22d59dfad62fc0ae"
            ]
        ]
    },
    {
        "id": "e3a06b222a8f9248",
        "type": "ui_gauge",
        "z": "a4b69b0808ede90b",
        "name": "Temperatura (ºC)",
        "group": "grp1",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "Temperatura",
        "label": "ºC",
        "format": "{{value}}",
        "min": "-20",
        "max": 50,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 550,
        "y": 200,
        "wires": []
    },
    {
        "id": "6b2740e20fdd1a77",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Humidade Ar",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/HumidadeAr",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "9d503974537ef133",
                "2119d49503e95395",
                "22d59dfad62fc0ae"
            ]
        ]
    },
    {
        "id": "9d503974537ef133",
        "type": "ui_gauge",
        "z": "a4b69b0808ede90b",
        "name": "Humidade Ar (%)",
        "group": "grp1",
        "order": 2,
        "width": 6,
        "height": "4",
        "gtype": "gage",
        "title": "Humidade do Ar",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "9dee8427e3c5eb01",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Humidade Solo",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/HumidadeSolo",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 260,
        "y": 580,
        "wires": [
            [
                "ed71e1ead43fa1e9",
                "396d08231db09202",
                "22d59dfad62fc0ae"
            ]
        ]
    },
    {
        "id": "ed71e1ead43fa1e9",
        "type": "ui_gauge",
        "z": "a4b69b0808ede90b",
        "name": "Humidade Solo (%)",
        "group": "grp1",
        "order": 3,
        "width": 6,
        "height": "4",
        "gtype": "gage",
        "title": "Humidade do Solo",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "bc81938389c76b37",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "Subscrever ao Tópico da Humidade",
        "info": "",
        "x": 320,
        "y": 420,
        "wires": []
    },
    {
        "id": "33e49d443f599599",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Estado Bomba",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/EstadoRega",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 260,
        "y": 840,
        "wires": [
            [
                "3ba5ad82c8023334",
                "a72b23cccea729d0"
            ]
        ]
    },
    {
        "id": "a4dcbe791fbe7d14",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "Estado da Bomba",
        "info": "",
        "x": 270,
        "y": 780,
        "wires": []
    },
    {
        "id": "396d08231db09202",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Decisão Rega Automática",
        "func": "var solo = parseInt(msg.payload);\nif (solo < 30) {\n    msg.payload = \"REGAR\";\n} else {\n    msg.payload = \"NAO_REGAR\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 680,
        "wires": [
            [
                "4241497c62d9c7f7"
            ]
        ]
    },
    {
        "id": "fa5da9a9e3e343b5",
        "type": "ui_button",
        "z": "a4b69b0808ede90b",
        "name": "Botão Manual",
        "group": "grp1",
        "order": 4,
        "width": 6,
        "height": 2,
        "passthru": false,
        "label": "REGAR MANUAL",
        "tooltip": "Força a rega manualmente",
        "color": "white",
        "bgcolor": "gray",
        "className": "",
        "icon": "",
        "payload": "REGAR",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 580,
        "y": 720,
        "wires": [
            [
                "4241497c62d9c7f7"
            ]
        ]
    },
    {
        "id": "4241497c62d9c7f7",
        "type": "mqtt out",
        "z": "a4b69b0808ede90b",
        "name": "Comando Rega",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/ComandoRega",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "12da53346277876d",
        "x": 800,
        "y": 680,
        "wires": []
    },
    {
        "id": "3ba5ad82c8023334",
        "type": "ui_text",
        "z": "a4b69b0808ede90b",
        "group": "grp1",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "Estado Atual",
        "label": "Estado da Bomba",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "Verdana,Verdana,Geneva,sans-serif",
        "fontSize": "14",
        "color": "#000000",
        "x": 510,
        "y": 840,
        "wires": []
    },
    {
        "id": "ef69ea56c01191ed",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "Funcionalidade da Bomba",
        "info": "",
        "x": 550,
        "y": 640,
        "wires": []
    },
    {
        "id": "8849642a20673125",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "Encriptação dos Dados",
        "info": "",
        "x": 1480,
        "y": 140,
        "wires": []
    },
    {
        "id": "decrypt_temp",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Descriptografar Temperatura",
        "func": "const CryptoJS = require('crypto-js');\nconst key = CryptoJS.enc.Hex.parse('2b7e151628aed2a6abf7158809cf4f3c');\nconst iv = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nif (msg.topic === 'IPB/IoT/PW2/TurnoD/Group2/Temperatura') {\n    const bytes = CryptoJS.AES.decrypt({ ciphertext: CryptoJS.enc.Base64.parse(msg.payload) }, key, { iv: iv });\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    msg.payload = [{\n        measurement: 'Temperatura',\n        fields: {\n            temperature: parseFloat(decrypted)\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            }
        ],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "330cd1a79b602b18"
            ]
        ]
    },
    {
        "id": "decrypt_hum_ar",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Descriptografar Humidade Ar",
        "func": "const CryptoJS = require('node-red-contrib-crypto-js');\nconst key = CryptoJS.enc.Hex.parse('2b7e151628aed2a6abf7158809cf4f3c');\nconst iv = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nif (msg.topic === 'IPB/IoT/PW2/TurnoD/Group2/HumidadeAr') {\n    const bytes = CryptoJS.AES.decrypt({ ciphertext: CryptoJS.enc.Base64.parse(msg.payload) }, key, { iv: iv });\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    msg.payload = [{\n        measurement: 'HumidadeAr',\n        fields: {\n            humidity_air: parseFloat(decrypted)\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            }
        ],
        "x": 780,
        "y": 480,
        "wires": [
            [
                "1fcd8e606f400a79"
            ]
        ]
    },
    {
        "id": "decrypt_hum_solo",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Descriptografar Humidade Solo",
        "func": "const CryptoJS = require('crypto-js');\nconst key = CryptoJS.enc.Hex.parse('2b7e151628aed2a6abf7158809cf4f3c');\nconst iv = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\nif (msg.topic === 'IPB/IoT/PW2/TurnoD/Group2/HumidadeSolo') {\n    const bytes = CryptoJS.AES.decrypt({ ciphertext: CryptoJS.enc.Base64.parse(msg.payload) }, key, { iv: iv });\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    msg.payload = [{\n        measurement: 'HumidadeSolo',\n        fields: {\n            soil_moisture: parseFloat(decrypted)\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CryptoJS",
                "module": "crypto-js"
            }
        ],
        "x": 770,
        "y": 580,
        "wires": [
            [
                "bc68beeaaadb8389"
            ]
        ]
    },
    {
        "id": "330cd1a79b602b18",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Descriptografar Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 260,
        "wires": []
    },
    {
        "id": "2119d49503e95395",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Humidade Ar",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 520,
        "wires": []
    },
    {
        "id": "b43765508b523048",
        "type": "influxdb batch",
        "z": "a4b69b0808ede90b",
        "influxdb": "31a881a833a15a29",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "rega",
        "x": 870,
        "y": 360,
        "wires": []
    },
    {
        "id": "bc68beeaaadb8389",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Descriptografar Humidade Solo",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "1fcd8e606f400a79",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Descriptografar Humidade Ar",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 480,
        "wires": []
    },
    {
        "id": "22d59dfad62fc0ae",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Enviar Dados para o Influx",
        "func": "if (msg.topic === \"IPB/IoT/PW2/TurnoD/Group2/Temperatura\") {\n    msg.payload = [{\n        measurement: \"Temperatura\",\n        fields: {\n            temperature: msg.payload,\n        },\n        tags: {\n            sensorID: \"sensor_Internal\",\n            location: \"internal_area\"\n        }\n    }];\n} else if (msg.topic === \"IPB/IoT/PW2/TurnoD/Group2/HumidadeAr\") {\n    msg.payload = [{\n        measurement: \"Humidade do Ar\",\n        fields: {\n            humidadeAr: msg.payload,\n        },\n        tags: {\n            sensorID: \"sensor_External\",\n            location: \"external_area\"\n        }\n    }];\n} else if (msg.topic === \"IPB/IoT/PW2/TurnoD/Group2/HumidadeSolo\") {\n    msg.payload = [{\n        measurement: \"Humidade do Solo\",\n        fields: {\n            humidadeSolo: msg.payload\n        },\n        tags: {\n            sensorID: \"sensor_External\",\n            location: \"external_area\"\n        }\n    }];\n} \n    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 360,
        "wires": [
            [
                "b43765508b523048",
                "c821f435469e46ec"
            ]
        ]
    },
    {
        "id": "c821f435469e46ec",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Enviar Dados para o Influx",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "adecfb74ed05a6d7",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Temperatura",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1450,
        "y": 220,
        "wires": [
            [
                "2fcf0c41fcd259ae",
                "01b64204d85861a3",
                "40f9de668b54ac99"
            ]
        ]
    },
    {
        "id": "73cffa7f6999b4d0",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Format Temperatura for InfluxDB",
        "func": "try {\n    const value = parseFloat(msg.payload);\n    if (isNaN(value)) {\n        node.error('Invalid decrypted temperature: ' + msg.payload);\n        return null;\n    }\n    msg.payload = [{\n        measurement: 'Temperatura',\n        fields: {\n            temperature: value\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n    return msg;\n} catch (e) {\n    node.error('Error formatting temperature: ' + e.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 220,
        "wires": [
            [
                "4b8fda50aa848031",
                "a6679e58568803a7"
            ]
        ]
    },
    {
        "id": "f1fd78b77b3276f6",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Debug Decrypted Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 300,
        "wires": []
    },
    {
        "id": "4b8fda50aa848031",
        "type": "influxdb batch",
        "z": "a4b69b0808ede90b",
        "influxdb": "27d01ea28377befc",
        "name": "InfluxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "IoT",
        "x": 2220,
        "y": 220,
        "wires": []
    },
    {
        "id": "2fcf0c41fcd259ae",
        "type": "decrypt",
        "z": "a4b69b0808ede90b",
        "name": "",
        "algorithm": "AES",
        "key": "ReAu+O0WLfzsqkG/0JeQ3y/HfzKM42LFQKYc1PkScs4=",
        "x": 1660,
        "y": 220,
        "wires": [
            [
                "73cffa7f6999b4d0",
                "f1fd78b77b3276f6"
            ]
        ]
    },
    {
        "id": "01b64204d85861a3",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 280,
        "wires": []
    },
    {
        "id": "a6679e58568803a7",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2220,
        "y": 260,
        "wires": []
    },
    {
        "id": "31e4e0e8b63bc8bc",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Secret Key",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 360,
        "wires": []
    },
    {
        "id": "9081fe259e20eed8",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Secret Key",
        "topic": "Cripto/AES",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1440,
        "y": 360,
        "wires": [
            [
                "31e4e0e8b63bc8bc"
            ]
        ]
    },
    {
        "id": "40f9de668b54ac99",
        "type": "decode",
        "z": "a4b69b0808ede90b",
        "name": "",
        "encode": "Base64",
        "x": 1680,
        "y": 100,
        "wires": [
            [
                "2fcf0c41fcd259ae",
                "35d8d19836ff1f98"
            ]
        ]
    },
    {
        "id": "35d8d19836ff1f98",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 100,
        "wires": []
    },
    {
        "id": "99bcf8ecaa266204",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "Subscrever ao Tópico da Temperatura",
        "info": "",
        "x": 1530,
        "y": 480,
        "wires": []
    },
    {
        "id": "2e1bbdf4c6cdf6a2",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Temperatura",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Temperatura",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1450,
        "y": 540,
        "wires": [
            [
                "10bec076abbeb090",
                "d016881d66a7e89d",
                "f45f537747c64379"
            ]
        ]
    },
    {
        "id": "10bec076abbeb090",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Debug Raw Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 660,
        "wires": []
    },
    {
        "id": "d016881d66a7e89d",
        "type": "decode",
        "z": "a4b69b0808ede90b",
        "name": "Decode Base64",
        "encode": "Base64",
        "x": 1660,
        "y": 600,
        "wires": [
            [
                "7b0198a1873e3a32"
            ]
        ]
    },
    {
        "id": "7b0198a1873e3a32",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Debug Decoded Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 600,
        "wires": []
    },
    {
        "id": "f45f537747c64379",
        "type": "decrypt",
        "z": "a4b69b0808ede90b",
        "name": "Decrypt Temperatura",
        "algorithm": "aes",
        "key": "45e02ef8ed0c5cfeacaa51bfd09790df",
        "x": 1680,
        "y": 540,
        "wires": [
            [
                "6e05de3290ad6116",
                "df3837b0331d7d41"
            ]
        ]
    },
    {
        "id": "6e05de3290ad6116",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Format Temperatura for InfluxDB",
        "func": "try {\n    const value = parseFloat(msg.payload);\n    if (isNaN(value)) {\n        node.error('Invalid decrypted temperature: ' + msg.payload);\n        return null;\n    }\n    msg.payload = [{\n        measurement: 'Temperatura',\n        fields: {\n            temperature: value\n        },\n        tags: {\n            sensorID: 'sensor_Internal',\n            location: 'internal_area'\n        }\n    }];\n    return msg;\n} catch (e) {\n    node.error('Error formatting temperature: ' + e.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 540,
        "wires": [
            [
                "940ea508b96fd6d5"
            ]
        ]
    },
    {
        "id": "df3837b0331d7d41",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Debug Decrypted Temperatura",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 500,
        "wires": []
    },
    {
        "id": "940ea508b96fd6d5",
        "type": "influxdb batch",
        "z": "a4b69b0808ede90b",
        "influxdb": "9655414289e5c7d3",
        "name": "InfluxDB Temperatura",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "IPB",
        "bucket": "IoT",
        "x": 2320,
        "y": 540,
        "wires": []
    },
    {
        "id": "87563901419bf5ca",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "API IPMA",
        "info": "",
        "x": 260,
        "y": 960,
        "wires": []
    },
    {
        "id": "18ee27b743a82938",
        "type": "inject",
        "z": "a4b69b0808ede90b",
        "name": "Verificação todos os dias as 08:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "9ad9ccbdc9882926"
            ]
        ]
    },
    {
        "id": "9ad9ccbdc9882926",
        "type": "http request",
        "z": "a4b69b0808ede90b",
        "name": "IPMA Previsão Bragança",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.ipma.pt/open-data/forecast/meteorology/cities/daily/1040200.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1020,
        "wires": [
            [
                "56b5a5abef2bbe8d",
                "08e3db83d159b012"
            ]
        ]
    },
    {
        "id": "08e3db83d159b012",
        "type": "function",
        "z": "a4b69b0808ede90b",
        "name": "Decisão de Rega baseado na API",
        "func": "try {\n    const today = new Date().toISOString().split('T')[0];\n\n    // Extrai os dados da API\n    const forecastData = msg.payload.data;\n    const todayForecast = forecastData.find(day => day.forecastDate === today);\n    const precipProbability = todayForecast ? parseFloat(todayForecast.precipitaProb) : 0;\n\n    // Logica da chuva\n    const precipThreshold = 30; // Limiar de probabilidade de precipitação (%)\n    const willRain = precipProbability >= precipThreshold; //  É provável que chova se a probabilidade for >= 30%\n\n    // Decisão da rega\n    if (willRain) {\n        msg.payload = 'NAO_REGAR';\n        node.warn(`Probabilidade de chuva: Probabilidade de precipitação=${precipProbability}%`);\n    } else {\n        msg.payload = 'REGAR';\n        node.warn(`Não se prevê chuva: Probabilidade de precipitação=${precipProbability}%`);\n    }\n\n    msg.topic = 'IPB/IoT/PW2/TurnoD/Group2/ComandoRega';\n    return msg;\n} catch (e) {\n    node.error('Error: ' + e.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1020,
        "wires": [
            [
                "44af25d287eeca3e",
                "3613a6df5cc2926e"
            ]
        ]
    },
    {
        "id": "44af25d287eeca3e",
        "type": "mqtt out",
        "z": "a4b69b0808ede90b",
        "name": "Controlo da Rega",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/ComandoRega",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "12da53346277876d",
        "x": 1250,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3613a6df5cc2926e",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Decisão de Rega",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1080,
        "wires": []
    },
    {
        "id": "56b5a5abef2bbe8d",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Previsão",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 980,
        "wires": []
    },
    {
        "id": "a72b23cccea729d0",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Estado da Bomba",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 880,
        "wires": []
    },
    {
        "id": "cdb61ebcbb29fde8",
        "type": "ui_gauge",
        "z": "a4b69b0808ede90b",
        "name": "Luz",
        "group": "grp1",
        "order": 3,
        "width": 6,
        "height": "4",
        "gtype": "wave",
        "title": "Luz",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1030,
        "y": 820,
        "wires": []
    },
    {
        "id": "8379b6de3b76a6d8",
        "type": "mqtt in",
        "z": "a4b69b0808ede90b",
        "name": "Luz",
        "topic": "IPB/IoT/PW2/TurnoD/Group2/Luminosidade",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "12da53346277876d",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 850,
        "y": 820,
        "wires": [
            [
                "cdb61ebcbb29fde8",
                "aa05fe9fd50eaf91"
            ]
        ]
    },
    {
        "id": "aa05fe9fd50eaf91",
        "type": "debug",
        "z": "a4b69b0808ede90b",
        "name": "Estado da Luz",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 860,
        "wires": []
    },
    {
        "id": "1c12d6884626c0df",
        "type": "comment",
        "z": "a4b69b0808ede90b",
        "name": "Luz",
        "info": "",
        "x": 850,
        "y": 780,
        "wires": []
    },
    {
        "id": "12da53346277876d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.emqx.io",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "grp1",
        "type": "ui_group",
        "name": "Dashboard Rega",
        "tab": "tab1",
        "order": 1,
        "disp": true,
        "width": 6
    },
    {
        "id": "31a881a833a15a29",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB Version2",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "27d01ea28377befc",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "9655414289e5c7d3",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": false
    },
    {
        "id": "tab1",
        "type": "ui_tab",
        "name": "Sistema de Rega",
        "icon": "dashboard",
        "order": 1
    }
]